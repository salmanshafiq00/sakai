//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ILookupDetailsClient {
    getLookupDetails(query: GetLookupDetailListQuery): Observable<PaginatedResponseOfLookupDetailModel>;
    getLookupDetail(id: string): Observable<LookupDetailModel>;
    deleteLookupDetail(id: string): Observable<void>;
    createLookupDetail(command: CreateLookupDetailCommand): Observable<string>;
    updateLookupDetail(command: UpdateLookupDetailCommand): Observable<void>;
}

@Injectable()
export class LookupDetailsClient implements ILookupDetailsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getLookupDetails(query: GetLookupDetailListQuery): Observable<PaginatedResponseOfLookupDetailModel> {
        let url_ = this.baseUrl + "/api/LookupDetails/GetLookupDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookupDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookupDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfLookupDetailModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfLookupDetailModel>;
        }));
    }

    protected processGetLookupDetails(response: HttpResponseBase): Observable<PaginatedResponseOfLookupDetailModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfLookupDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getLookupDetail(id: string): Observable<LookupDetailModel> {
        let url_ = this.baseUrl + "/api/LookupDetails/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookupDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookupDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LookupDetailModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LookupDetailModel>;
        }));
    }

    protected processGetLookupDetail(response: HttpResponseBase): Observable<LookupDetailModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LookupDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteLookupDetail(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/LookupDetails/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteLookupDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLookupDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteLookupDetail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createLookupDetail(command: CreateLookupDetailCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/LookupDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateLookupDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateLookupDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateLookupDetail(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateLookupDetail(command: UpdateLookupDetailCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/LookupDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateLookupDetail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateLookupDetail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateLookupDetail(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ILookupsClient {
    getLookups(query: GetLookupListQuery): Observable<PaginatedResponseOfLookupModel>;
    getLookup(id: string): Observable<LookupModel>;
    deleteLookup(id: string): Observable<void>;
    createLookup(command: CreateLookupCommand): Observable<string>;
    updateLookup(command: UpdateLookupCommand): Observable<void>;
}

@Injectable()
export class LookupsClient implements ILookupsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getLookups(query: GetLookupListQuery): Observable<PaginatedResponseOfLookupModel> {
        let url_ = this.baseUrl + "/api/Lookups/GetLookups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookups(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfLookupModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfLookupModel>;
        }));
    }

    protected processGetLookups(response: HttpResponseBase): Observable<PaginatedResponseOfLookupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfLookupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getLookup(id: string): Observable<LookupModel> {
        let url_ = this.baseUrl + "/api/Lookups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LookupModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LookupModel>;
        }));
    }

    protected processGetLookup(response: HttpResponseBase): Observable<LookupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LookupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteLookup(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Lookups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteLookup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteLookup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteLookup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createLookup(command: CreateLookupCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Lookups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateLookup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateLookup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateLookup(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateLookup(command: UpdateLookupCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Lookups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateLookup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateLookup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateLookup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISelectListsClient {
    getLookupSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
    getLookupDetailSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
    getRoleSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
    getMenuTypeSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
}

@Injectable()
export class SelectListsClient implements ISelectListsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getLookupSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetLookupSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookupSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookupSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetLookupSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getLookupDetailSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetLookupDetailSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookupDetailSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookupDetailSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetLookupDetailSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRoleSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetRoleSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetRoleSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getMenuTypeSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetMenuTypeSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMenuTypeSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMenuTypeSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetMenuTypeSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITreeNodeListsClient {
    getAllPermissionNodeList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]>;
    getAllAppMenuTreeSelectList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]>;
}

@Injectable()
export class TreeNodeListsClient implements ITreeNodeListsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllPermissionNodeList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]> {
        let url_ = this.baseUrl + "/api/TreeNodeLists/GetAllPermissionNodeList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPermissionNodeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPermissionNodeList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TreeNodeModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TreeNodeModel[]>;
        }));
    }

    protected processGetAllPermissionNodeList(response: HttpResponseBase): Observable<TreeNodeModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeNodeModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllAppMenuTreeSelectList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]> {
        let url_ = this.baseUrl + "/api/TreeNodeLists/GetAllAppMenuTreeSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllAppMenuTreeSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllAppMenuTreeSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TreeNodeModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TreeNodeModel[]>;
        }));
    }

    protected processGetAllAppMenuTreeSelectList(response: HttpResponseBase): Observable<TreeNodeModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeNodeModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAppMenusClient {
    getAppMenus(query: GetAppMenuListQuery): Observable<PaginatedResponseOfAppMenuModel>;
    getSidebarMenus(): Observable<SidebarMenuModel[]>;
    getAppMenu(id: string): Observable<AppMenuModel>;
    createMenu(command: CreateAppMenuCommand): Observable<string>;
    updateMenu(command: UpdateAppMenuCommand): Observable<void>;
}

@Injectable()
export class AppMenusClient implements IAppMenusClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAppMenus(query: GetAppMenuListQuery): Observable<PaginatedResponseOfAppMenuModel> {
        let url_ = this.baseUrl + "/api/AppMenus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppMenus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppMenus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppMenuModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppMenuModel>;
        }));
    }

    protected processGetAppMenus(response: HttpResponseBase): Observable<PaginatedResponseOfAppMenuModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppMenuModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSidebarMenus(): Observable<SidebarMenuModel[]> {
        let url_ = this.baseUrl + "/api/AppMenus/GetSidebarMenus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSidebarMenus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSidebarMenus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SidebarMenuModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SidebarMenuModel[]>;
        }));
    }

    protected processGetSidebarMenus(response: HttpResponseBase): Observable<SidebarMenuModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SidebarMenuModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAppMenu(id: string): Observable<AppMenuModel> {
        let url_ = this.baseUrl + "/api/AppMenus/GetMenu/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppMenu(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppMenuModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppMenuModel>;
        }));
    }

    protected processGetAppMenu(response: HttpResponseBase): Observable<AppMenuModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppMenuModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createMenu(command: CreateAppMenuCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AppMenus/CreateMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMenu(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateMenu(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateMenu(command: UpdateAppMenuCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/AppMenus/UpdateMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMenu(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateMenu(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAppPagesClient {
    getAppPages(query: GetAppPageListQuery): Observable<PaginatedResponseOfAppPageModel>;
    getAppPage(id: string): Observable<AppPageModel>;
    createAppPage(command: CreateAppPageCommand): Observable<string>;
    updateAppPage(command: UpdateAppPageCommand): Observable<void>;
    upsertAppPage(command: UpsertAppPageCommand): Observable<string>;
}

@Injectable()
export class AppPagesClient implements IAppPagesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAppPages(query: GetAppPageListQuery): Observable<PaginatedResponseOfAppPageModel> {
        let url_ = this.baseUrl + "/api/AppPages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppPageModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppPageModel>;
        }));
    }

    protected processGetAppPages(response: HttpResponseBase): Observable<PaginatedResponseOfAppPageModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppPageModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAppPage(id: string): Observable<AppPageModel> {
        let url_ = this.baseUrl + "/api/AppPages/GetPage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAppPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAppPage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppPageModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppPageModel>;
        }));
    }

    protected processGetAppPage(response: HttpResponseBase): Observable<AppPageModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPageModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createAppPage(command: CreateAppPageCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AppPages/CreateAppPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAppPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAppPage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateAppPage(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAppPage(command: UpdateAppPageCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/AppPages/UpdateAppPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAppPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAppPage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateAppPage(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upsertAppPage(command: UpsertAppPageCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AppPages/UpsertAppPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsertAppPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsertAppPage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processUpsertAppPage(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRolesClient {
    getRoles(query: GetRoleListQuery): Observable<PaginatedResponseOfRoleModel>;
    getRole(id: string): Observable<RoleModel>;
    create(command: CreateRoleCommand): Observable<string>;
    updateRole(command: UpdateRoleCommand): Observable<void>;
    getRolePermissions(id: string): Observable<TreeNodeModel[]>;
}

@Injectable()
export class RolesClient implements IRolesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getRoles(query: GetRoleListQuery): Observable<PaginatedResponseOfRoleModel> {
        let url_ = this.baseUrl + "/api/Roles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfRoleModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfRoleModel>;
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<PaginatedResponseOfRoleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfRoleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRole(id: string): Observable<RoleModel> {
        let url_ = this.baseUrl + "/api/Roles/GetRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleModel>;
        }));
    }

    protected processGetRole(response: HttpResponseBase): Observable<RoleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateRoleCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Roles/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateRole(command: UpdateRoleCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Roles/UpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRole(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateRole(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRolePermissions(id: string): Observable<TreeNodeModel[]> {
        let url_ = this.baseUrl + "/api/Roles/GetRolePermissions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRolePermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRolePermissions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TreeNodeModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TreeNodeModel[]>;
        }));
    }

    protected processGetRolePermissions(response: HttpResponseBase): Observable<TreeNodeModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeNodeModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUsersClient {
    getUsers(query: GetAppUserListQuery): Observable<PaginatedResponseOfAppUserModel>;
    getUser(id: string): Observable<AppUserModel>;
    createUser(command: CreateAppUserCommand): Observable<string>;
    updateUser(command: UpdateAppUserCommand): Observable<void>;
    addToRoles(command: AddToRolesCommand): Observable<void>;
}

@Injectable()
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getUsers(query: GetAppUserListQuery): Observable<PaginatedResponseOfAppUserModel> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppUserModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppUserModel>;
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<PaginatedResponseOfAppUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUser(id: string): Observable<AppUserModel> {
        let url_ = this.baseUrl + "/api/Users/GetUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppUserModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppUserModel>;
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<AppUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createUser(command: CreateAppUserCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Users/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateUser(command: UpdateAppUserCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addToRoles(command: AddToRolesCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/AddToRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddToRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddToRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddToRoles(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAccountsClient {
    login(command: LoginRequestCommand): Observable<AuthenticatedResponse>;
    refreshToken(): Observable<AuthenticatedResponse>;
}

@Injectable()
export class AccountsClient implements IAccountsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    login(command: LoginRequestCommand): Observable<AuthenticatedResponse> {
        let url_ = this.baseUrl + "/api/Accounts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticatedResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticatedResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthenticatedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticatedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    refreshToken(): Observable<AuthenticatedResponse> {
        let url_ = this.baseUrl + "/api/Accounts/RefreshToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticatedResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticatedResponse>;
        }));
    }

    protected processRefreshToken(response: HttpResponseBase): Observable<AuthenticatedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticatedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class PaginatedResponseOfLookupDetailModel implements IPaginatedResponseOfLookupDetailModel {
    items?: LookupDetailModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfLookupDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LookupDetailModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfLookupDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfLookupDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfLookupDetailModel {
    items?: LookupDetailModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };
}

export class LookupDetailModel implements ILookupDetailModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    lookupId?: string | undefined;
    lookupName?: string;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: ILookupDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.statusName = _data["statusName"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            this.lookupId = _data["lookupId"];
            this.lookupName = _data["lookupName"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): LookupDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["statusName"] = this.statusName;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["lookupId"] = this.lookupId;
        data["lookupName"] = this.lookupName;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface ILookupDetailModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    lookupId?: string | undefined;
    lookupName?: string;
    optionDataSources?: { [key: string]: any; };
}

export abstract class DataGridModel implements IDataGridModel {
    isInitialLoaded?: boolean;
    allowCache?: boolean | undefined;
    pageNumber?: number;
    pageSize?: number;
    offset?: number;
    sortField?: string;
    sortOrder?: number | undefined;
    defaultOrderFieldName?: string | undefined;
    globalFilterValue?: string;
    globalFilterFields?: GlobalFilterFieldModel[];
    filters?: DataFilterModel[];

    constructor(data?: IDataGridModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isInitialLoaded = _data["isInitialLoaded"];
            this.allowCache = _data["allowCache"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.offset = _data["offset"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
            this.defaultOrderFieldName = _data["defaultOrderFieldName"];
            this.globalFilterValue = _data["globalFilterValue"];
            if (Array.isArray(_data["globalFilterFields"])) {
                this.globalFilterFields = [] as any;
                for (let item of _data["globalFilterFields"])
                    this.globalFilterFields!.push(GlobalFilterFieldModel.fromJS(item));
            }
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(DataFilterModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataGridModel {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DataGridModel' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isInitialLoaded"] = this.isInitialLoaded;
        data["allowCache"] = this.allowCache;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["offset"] = this.offset;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        data["defaultOrderFieldName"] = this.defaultOrderFieldName;
        data["globalFilterValue"] = this.globalFilterValue;
        if (Array.isArray(this.globalFilterFields)) {
            data["globalFilterFields"] = [];
            for (let item of this.globalFilterFields)
                data["globalFilterFields"].push(item.toJSON());
        }
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDataGridModel {
    isInitialLoaded?: boolean;
    allowCache?: boolean | undefined;
    pageNumber?: number;
    pageSize?: number;
    offset?: number;
    sortField?: string;
    sortOrder?: number | undefined;
    defaultOrderFieldName?: string | undefined;
    globalFilterValue?: string;
    globalFilterFields?: GlobalFilterFieldModel[];
    filters?: DataFilterModel[];
}

export class GetLookupDetailListQuery extends DataGridModel implements IGetLookupDetailListQuery {
    cacheKey?: string;

    constructor(data?: IGetLookupDetailListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetLookupDetailListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLookupDetailListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetLookupDetailListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class GlobalFilterFieldModel implements IGlobalFilterFieldModel {
    field?: string;
    dbField?: string;
    fieldType?: string;
    matchMode?: string;

    constructor(data?: IGlobalFilterFieldModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.dbField = _data["dbField"];
            this.fieldType = _data["fieldType"];
            this.matchMode = _data["matchMode"];
        }
    }

    static fromJS(data: any): GlobalFilterFieldModel {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalFilterFieldModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["dbField"] = this.dbField;
        data["fieldType"] = this.fieldType;
        data["matchMode"] = this.matchMode;
        return data;
    }
}

export interface IGlobalFilterFieldModel {
    field?: string;
    dbField?: string;
    fieldType?: string;
    matchMode?: string;
}

export class DataFilterModel implements IDataFilterModel {
    field?: string;
    fieldType?: string;
    value?: string;
    matchMode?: string;
    operator?: string;
    dsName?: string;
    dbField?: string;

    constructor(data?: IDataFilterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.fieldType = _data["fieldType"];
            this.value = _data["value"];
            this.matchMode = _data["matchMode"];
            this.operator = _data["operator"];
            this.dsName = _data["dsName"];
            this.dbField = _data["dbField"];
        }
    }

    static fromJS(data: any): DataFilterModel {
        data = typeof data === 'object' ? data : {};
        let result = new DataFilterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["fieldType"] = this.fieldType;
        data["value"] = this.value;
        data["matchMode"] = this.matchMode;
        data["operator"] = this.operator;
        data["dsName"] = this.dsName;
        data["dbField"] = this.dbField;
        return data;
    }
}

export interface IDataFilterModel {
    field?: string;
    fieldType?: string;
    value?: string;
    matchMode?: string;
    operator?: string;
    dsName?: string;
    dbField?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class CreateLookupDetailCommand implements ICreateLookupDetailCommand {
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    lookupId?: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateLookupDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.lookupId = _data["lookupId"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateLookupDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLookupDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["lookupId"] = this.lookupId;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateLookupDetailCommand {
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    lookupId?: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class UpdateLookupDetailCommand implements IUpdateLookupDetailCommand {
    id?: string;
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    lookupId!: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateLookupDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.lookupId = _data["lookupId"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateLookupDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLookupDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["lookupId"] = this.lookupId;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateLookupDetailCommand {
    id?: string;
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    lookupId: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfLookupModel implements IPaginatedResponseOfLookupModel {
    items?: LookupModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LookupModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfLookupModel {
    items?: LookupModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };
}

export class LookupModel implements ILookupModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    created?: Date | undefined;
    createdDate?: Date | undefined;
    createdTime?: string | undefined;
    createdYear?: number | undefined;
    subjects?: string[];
    subjectRadio?: string;
    color?: string;
    uploadFile?: string;
    descEdit?: string;
    menus?: string[];
    singleMenu?: string;
    treeSelectMenus?: string[];
    treeSelectSingleMenu?: string;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: ILookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.statusName = _data["statusName"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.createdTime = _data["createdTime"];
            this.createdYear = _data["createdYear"];
            if (Array.isArray(_data["subjects"])) {
                this.subjects = [] as any;
                for (let item of _data["subjects"])
                    this.subjects!.push(item);
            }
            this.subjectRadio = _data["subjectRadio"];
            this.color = _data["color"];
            this.uploadFile = _data["uploadFile"];
            this.descEdit = _data["descEdit"];
            if (Array.isArray(_data["menus"])) {
                this.menus = [] as any;
                for (let item of _data["menus"])
                    this.menus!.push(item);
            }
            this.singleMenu = _data["singleMenu"];
            if (Array.isArray(_data["treeSelectMenus"])) {
                this.treeSelectMenus = [] as any;
                for (let item of _data["treeSelectMenus"])
                    this.treeSelectMenus!.push(item);
            }
            this.treeSelectSingleMenu = _data["treeSelectSingleMenu"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): LookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new LookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["statusName"] = this.statusName;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdDate"] = this.createdDate ? formatDate(this.createdDate) : <any>undefined;
        data["createdTime"] = this.createdTime;
        data["createdYear"] = this.createdYear;
        if (Array.isArray(this.subjects)) {
            data["subjects"] = [];
            for (let item of this.subjects)
                data["subjects"].push(item);
        }
        data["subjectRadio"] = this.subjectRadio;
        data["color"] = this.color;
        data["uploadFile"] = this.uploadFile;
        data["descEdit"] = this.descEdit;
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item);
        }
        data["singleMenu"] = this.singleMenu;
        if (Array.isArray(this.treeSelectMenus)) {
            data["treeSelectMenus"] = [];
            for (let item of this.treeSelectMenus)
                data["treeSelectMenus"].push(item);
        }
        data["treeSelectSingleMenu"] = this.treeSelectSingleMenu;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface ILookupModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    created?: Date | undefined;
    createdDate?: Date | undefined;
    createdTime?: string | undefined;
    createdYear?: number | undefined;
    subjects?: string[];
    subjectRadio?: string;
    color?: string;
    uploadFile?: string;
    descEdit?: string;
    menus?: string[];
    singleMenu?: string;
    treeSelectMenus?: string[];
    treeSelectSingleMenu?: string;
    optionDataSources?: { [key: string]: any; };
}

export class GetLookupListQuery extends DataGridModel implements IGetLookupListQuery {

    constructor(data?: IGetLookupListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetLookupListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLookupListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetLookupListQuery extends IDataGridModel {
}

export class CreateLookupCommand implements ICreateLookupCommand {
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    createdDate?: Date;
    createdTime?: string;
    created?: Date;
    createdYear?: number;
    color?: string;
    subjects?: string[];
    subjectRadio?: string;
    uploadFile?: string | undefined;
    parentId?: string | undefined;

    constructor(data?: ICreateLookupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.createdTime = _data["createdTime"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdYear = _data["createdYear"];
            this.color = _data["color"];
            if (Array.isArray(_data["subjects"])) {
                this.subjects = [] as any;
                for (let item of _data["subjects"])
                    this.subjects!.push(item);
            }
            this.subjectRadio = _data["subjectRadio"];
            this.uploadFile = _data["uploadFile"];
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): CreateLookupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLookupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["createdDate"] = this.createdDate ? formatDate(this.createdDate) : <any>undefined;
        data["createdTime"] = this.createdTime;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdYear"] = this.createdYear;
        data["color"] = this.color;
        if (Array.isArray(this.subjects)) {
            data["subjects"] = [];
            for (let item of this.subjects)
                data["subjects"].push(item);
        }
        data["subjectRadio"] = this.subjectRadio;
        data["uploadFile"] = this.uploadFile;
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface ICreateLookupCommand {
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    createdDate?: Date;
    createdTime?: string;
    created?: Date;
    createdYear?: number;
    color?: string;
    subjects?: string[];
    subjectRadio?: string;
    uploadFile?: string | undefined;
    parentId?: string | undefined;
}

export class UpdateLookupCommand implements IUpdateLookupCommand {
    id?: string;
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateLookupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateLookupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLookupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateLookupCommand {
    id?: string;
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class SelectListModel implements ISelectListModel {
    id?: any;
    name?: string;
    isDefault?: boolean;
    severity?: string;

    constructor(data?: ISelectListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isDefault = _data["isDefault"];
            this.severity = _data["severity"];
        }
    }

    static fromJS(data: any): SelectListModel {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isDefault"] = this.isDefault;
        data["severity"] = this.severity;
        return data;
    }
}

export interface ISelectListModel {
    id?: any;
    name?: string;
    isDefault?: boolean;
    severity?: string;
}

export class TreeNodeModel implements ITreeNodeModel {
    key?: any;
    label?: string;
    icon?: string;
    parentId?: any | undefined;
    data?: string;
    disabledCheckbox?: boolean;
    disabled?: boolean;
    visible?: boolean;
    isActive?: boolean;
    partialSelected?: boolean;
    leaf?: boolean;
    children?: TreeNodeModel[];

    constructor(data?: ITreeNodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.label = _data["label"];
            this.icon = _data["icon"];
            this.parentId = _data["parentId"];
            this.data = _data["data"];
            this.disabledCheckbox = _data["disabledCheckbox"];
            this.disabled = _data["disabled"];
            this.visible = _data["visible"];
            this.isActive = _data["isActive"];
            this.partialSelected = _data["partialSelected"];
            this.leaf = _data["leaf"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(TreeNodeModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TreeNodeModel {
        data = typeof data === 'object' ? data : {};
        let result = new TreeNodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["label"] = this.label;
        data["icon"] = this.icon;
        data["parentId"] = this.parentId;
        data["data"] = this.data;
        data["disabledCheckbox"] = this.disabledCheckbox;
        data["disabled"] = this.disabled;
        data["visible"] = this.visible;
        data["isActive"] = this.isActive;
        data["partialSelected"] = this.partialSelected;
        data["leaf"] = this.leaf;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITreeNodeModel {
    key?: any;
    label?: string;
    icon?: string;
    parentId?: any | undefined;
    data?: string;
    disabledCheckbox?: boolean;
    disabled?: boolean;
    visible?: boolean;
    isActive?: boolean;
    partialSelected?: boolean;
    leaf?: boolean;
    children?: TreeNodeModel[];
}

export class PaginatedResponseOfAppMenuModel implements IPaginatedResponseOfAppMenuModel {
    items?: AppMenuModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppMenuModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppMenuModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppMenuModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppMenuModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppMenuModel {
    items?: AppMenuModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };
}

export class AppMenuModel implements IAppMenuModel {
    id?: string;
    parentId?: string | undefined;
    parentName?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    tooltip?: string;
    isActive?: boolean;
    orderNo?: number;
    visible?: boolean;
    visibility?: string;
    description?: string;
    active?: string;
    menuTypeId?: string;
    menuTypeName?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IAppMenuModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.tooltip = _data["tooltip"];
            this.isActive = _data["isActive"];
            this.orderNo = _data["orderNo"];
            this.visible = _data["visible"];
            this.visibility = _data["visibility"];
            this.description = _data["description"];
            this.active = _data["active"];
            this.menuTypeId = _data["menuTypeId"];
            this.menuTypeName = _data["menuTypeName"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): AppMenuModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppMenuModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["tooltip"] = this.tooltip;
        data["isActive"] = this.isActive;
        data["orderNo"] = this.orderNo;
        data["visible"] = this.visible;
        data["visibility"] = this.visibility;
        data["description"] = this.description;
        data["active"] = this.active;
        data["menuTypeId"] = this.menuTypeId;
        data["menuTypeName"] = this.menuTypeName;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IAppMenuModel {
    id?: string;
    parentId?: string | undefined;
    parentName?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    tooltip?: string;
    isActive?: boolean;
    orderNo?: number;
    visible?: boolean;
    visibility?: string;
    description?: string;
    active?: string;
    menuTypeId?: string;
    menuTypeName?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetAppMenuListQuery extends DataGridModel implements IGetAppMenuListQuery {

    constructor(data?: IGetAppMenuListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppMenuListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppMenuListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppMenuListQuery extends IDataGridModel {
}

export class SidebarMenuModel implements ISidebarMenuModel {
    id?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    visible?: boolean;
    tooltip?: string;
    orderNo?: number;
    parentId?: string | undefined;
    parentLabel?: string;
    items?: SidebarMenuModel[] | undefined;

    constructor(data?: ISidebarMenuModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.visible = _data["visible"];
            this.tooltip = _data["tooltip"];
            this.orderNo = _data["orderNo"];
            this.parentId = _data["parentId"];
            this.parentLabel = _data["parentLabel"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SidebarMenuModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SidebarMenuModel {
        data = typeof data === 'object' ? data : {};
        let result = new SidebarMenuModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["visible"] = this.visible;
        data["tooltip"] = this.tooltip;
        data["orderNo"] = this.orderNo;
        data["parentId"] = this.parentId;
        data["parentLabel"] = this.parentLabel;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISidebarMenuModel {
    id?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    visible?: boolean;
    tooltip?: string;
    orderNo?: number;
    parentId?: string | undefined;
    parentLabel?: string;
    items?: SidebarMenuModel[] | undefined;
}

export class CreateAppMenuCommand implements ICreateAppMenuCommand {
    label!: string;
    routerLink!: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId!: string;
    parentId?: string | undefined;

    constructor(data?: ICreateAppMenuCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.isActive = _data["isActive"];
            this.visible = _data["visible"];
            this.orderNo = _data["orderNo"];
            this.tooltip = _data["tooltip"];
            this.description = _data["description"];
            this.menuTypeId = _data["menuTypeId"];
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): CreateAppMenuCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppMenuCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["isActive"] = this.isActive;
        data["visible"] = this.visible;
        data["orderNo"] = this.orderNo;
        data["tooltip"] = this.tooltip;
        data["description"] = this.description;
        data["menuTypeId"] = this.menuTypeId;
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface ICreateAppMenuCommand {
    label: string;
    routerLink: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId: string;
    parentId?: string | undefined;
}

export class UpdateAppMenuCommand implements IUpdateAppMenuCommand {
    id?: string;
    label!: string;
    routerLink!: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId!: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateAppMenuCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.isActive = _data["isActive"];
            this.visible = _data["visible"];
            this.orderNo = _data["orderNo"];
            this.tooltip = _data["tooltip"];
            this.description = _data["description"];
            this.menuTypeId = _data["menuTypeId"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateAppMenuCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppMenuCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["isActive"] = this.isActive;
        data["visible"] = this.visible;
        data["orderNo"] = this.orderNo;
        data["tooltip"] = this.tooltip;
        data["description"] = this.description;
        data["menuTypeId"] = this.menuTypeId;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateAppMenuCommand {
    id?: string;
    label: string;
    routerLink: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfAppPageModel implements IPaginatedResponseOfAppPageModel {
    items?: AppPageModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppPageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppPageModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppPageModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppPageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppPageModel {
    items?: AppPageModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };
}

export class AppPageModel implements IAppPageModel {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    appPageFields?: AppPageFieldModel[];
    toolbarActions?: AppPageActionModel[];
    rowActions?: AppPageActionModel[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IAppPageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.subTitle = _data["subTitle"];
            this.componentName = _data["componentName"];
            this.appPageLayout = _data["appPageLayout"];
            if (Array.isArray(_data["appPageFields"])) {
                this.appPageFields = [] as any;
                for (let item of _data["appPageFields"])
                    this.appPageFields!.push(AppPageFieldModel.fromJS(item));
            }
            if (Array.isArray(_data["toolbarActions"])) {
                this.toolbarActions = [] as any;
                for (let item of _data["toolbarActions"])
                    this.toolbarActions!.push(AppPageActionModel.fromJS(item));
            }
            if (Array.isArray(_data["rowActions"])) {
                this.rowActions = [] as any;
                for (let item of _data["rowActions"])
                    this.rowActions!.push(AppPageActionModel.fromJS(item));
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): AppPageModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppPageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["subTitle"] = this.subTitle;
        data["componentName"] = this.componentName;
        data["appPageLayout"] = this.appPageLayout;
        if (Array.isArray(this.appPageFields)) {
            data["appPageFields"] = [];
            for (let item of this.appPageFields)
                data["appPageFields"].push(item.toJSON());
        }
        if (Array.isArray(this.toolbarActions)) {
            data["toolbarActions"] = [];
            for (let item of this.toolbarActions)
                data["toolbarActions"].push(item.toJSON());
        }
        if (Array.isArray(this.rowActions)) {
            data["rowActions"] = [];
            for (let item of this.rowActions)
                data["rowActions"].push(item.toJSON());
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IAppPageModel {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    appPageFields?: AppPageFieldModel[];
    toolbarActions?: AppPageActionModel[];
    rowActions?: AppPageActionModel[];
    optionsDataSources?: { [key: string]: any; };
}

export class AppPageFieldModel implements IAppPageFieldModel {
    id?: string;
    field?: string;
    header?: string;
    fieldType?: string;
    dbField?: string;
    format?: string;
    textAlign?: string;
    isSortable?: boolean;
    isFilterable?: boolean;
    dsName?: string;
    isGlobalFilterable?: boolean;
    filterType?: string;
    enableLink?: boolean;
    linkBaseUrl?: string;
    linkValueFieldName?: string;
    bgColor?: string;
    color?: string;
    isVisible?: boolean;
    sortOrder?: number;
    isActive?: boolean;

    constructor(data?: IAppPageFieldModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.field = _data["field"];
            this.header = _data["header"];
            this.fieldType = _data["fieldType"];
            this.dbField = _data["dbField"];
            this.format = _data["format"];
            this.textAlign = _data["textAlign"];
            this.isSortable = _data["isSortable"];
            this.isFilterable = _data["isFilterable"];
            this.dsName = _data["dsName"];
            this.isGlobalFilterable = _data["isGlobalFilterable"];
            this.filterType = _data["filterType"];
            this.enableLink = _data["enableLink"];
            this.linkBaseUrl = _data["linkBaseUrl"];
            this.linkValueFieldName = _data["linkValueFieldName"];
            this.bgColor = _data["bgColor"];
            this.color = _data["color"];
            this.isVisible = _data["isVisible"];
            this.sortOrder = _data["sortOrder"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): AppPageFieldModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppPageFieldModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["field"] = this.field;
        data["header"] = this.header;
        data["fieldType"] = this.fieldType;
        data["dbField"] = this.dbField;
        data["format"] = this.format;
        data["textAlign"] = this.textAlign;
        data["isSortable"] = this.isSortable;
        data["isFilterable"] = this.isFilterable;
        data["dsName"] = this.dsName;
        data["isGlobalFilterable"] = this.isGlobalFilterable;
        data["filterType"] = this.filterType;
        data["enableLink"] = this.enableLink;
        data["linkBaseUrl"] = this.linkBaseUrl;
        data["linkValueFieldName"] = this.linkValueFieldName;
        data["bgColor"] = this.bgColor;
        data["color"] = this.color;
        data["isVisible"] = this.isVisible;
        data["sortOrder"] = this.sortOrder;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IAppPageFieldModel {
    id?: string;
    field?: string;
    header?: string;
    fieldType?: string;
    dbField?: string;
    format?: string;
    textAlign?: string;
    isSortable?: boolean;
    isFilterable?: boolean;
    dsName?: string;
    isGlobalFilterable?: boolean;
    filterType?: string;
    enableLink?: boolean;
    linkBaseUrl?: string;
    linkValueFieldName?: string;
    bgColor?: string;
    color?: string;
    isVisible?: boolean;
    sortOrder?: number;
    isActive?: boolean;
}

export class AppPageActionModel implements IAppPageActionModel {
    id?: string;
    actionTypeId?: number | undefined;
    actionName?: string;
    severity?: string;
    permissions?: string;
    caption?: string;
    icon?: string;
    functionName?: string;
    navigationUrl?: string;
    position?: string;
    parentId?: string | undefined;
    sortOrder?: number;
    isVisible?: boolean;

    constructor(data?: IAppPageActionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.actionTypeId = _data["actionTypeId"];
            this.actionName = _data["actionName"];
            this.severity = _data["severity"];
            this.permissions = _data["permissions"];
            this.caption = _data["caption"];
            this.icon = _data["icon"];
            this.functionName = _data["functionName"];
            this.navigationUrl = _data["navigationUrl"];
            this.position = _data["position"];
            this.parentId = _data["parentId"];
            this.sortOrder = _data["sortOrder"];
            this.isVisible = _data["isVisible"];
        }
    }

    static fromJS(data: any): AppPageActionModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppPageActionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["actionTypeId"] = this.actionTypeId;
        data["actionName"] = this.actionName;
        data["severity"] = this.severity;
        data["permissions"] = this.permissions;
        data["caption"] = this.caption;
        data["icon"] = this.icon;
        data["functionName"] = this.functionName;
        data["navigationUrl"] = this.navigationUrl;
        data["position"] = this.position;
        data["parentId"] = this.parentId;
        data["sortOrder"] = this.sortOrder;
        data["isVisible"] = this.isVisible;
        return data;
    }
}

export interface IAppPageActionModel {
    id?: string;
    actionTypeId?: number | undefined;
    actionName?: string;
    severity?: string;
    permissions?: string;
    caption?: string;
    icon?: string;
    functionName?: string;
    navigationUrl?: string;
    position?: string;
    parentId?: string | undefined;
    sortOrder?: number;
    isVisible?: boolean;
}

export class GetAppPageListQuery extends DataGridModel implements IGetAppPageListQuery {

    constructor(data?: IGetAppPageListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppPageListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppPageListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppPageListQuery extends IDataGridModel {
}

export class CreateAppPageCommand implements ICreateAppPageCommand {
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;

    constructor(data?: ICreateAppPageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.subTitle = _data["subTitle"];
            this.componentName = _data["componentName"];
            this.appPageLayout = _data["appPageLayout"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateAppPageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppPageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["subTitle"] = this.subTitle;
        data["componentName"] = this.componentName;
        data["appPageLayout"] = this.appPageLayout;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateAppPageCommand {
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;
}

export class UpdateAppPageCommand implements IUpdateAppPageCommand {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;

    constructor(data?: IUpdateAppPageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.subTitle = _data["subTitle"];
            this.componentName = _data["componentName"];
            this.appPageLayout = _data["appPageLayout"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateAppPageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppPageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["subTitle"] = this.subTitle;
        data["componentName"] = this.componentName;
        data["appPageLayout"] = this.appPageLayout;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateAppPageCommand {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;
}

export class UpsertAppPageCommand extends AppPageModel implements IUpsertAppPageCommand {

    constructor(data?: IUpsertAppPageCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): UpsertAppPageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertAppPageCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IUpsertAppPageCommand extends IAppPageModel {
}

export class PaginatedResponseOfRoleModel implements IPaginatedResponseOfRoleModel {
    items?: RoleModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfRoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfRoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfRoleModel {
    items?: RoleModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };
}

export class RoleModel implements IRoleModel {
    id?: string;
    name?: string;
    roleMenus?: string[];
    permissions?: string[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["roleMenus"])) {
                this.roleMenus = [] as any;
                for (let item of _data["roleMenus"])
                    this.roleMenus!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): RoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.roleMenus)) {
            data["roleMenus"] = [];
            for (let item of this.roleMenus)
                data["roleMenus"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IRoleModel {
    id?: string;
    name?: string;
    roleMenus?: string[];
    permissions?: string[];
    optionsDataSources?: { [key: string]: any; };
}

export class GetRoleListQuery extends DataGridModel implements IGetRoleListQuery {

    constructor(data?: IGetRoleListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetRoleListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetRoleListQuery extends IDataGridModel {
}

export class CreateRoleCommand implements ICreateRoleCommand {
    name?: string;
    rolemenus?: string[];
    permissions?: string[];

    constructor(data?: ICreateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["rolemenus"])) {
                this.rolemenus = [] as any;
                for (let item of _data["rolemenus"])
                    this.rolemenus!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.rolemenus)) {
            data["rolemenus"] = [];
            for (let item of this.rolemenus)
                data["rolemenus"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface ICreateRoleCommand {
    name?: string;
    rolemenus?: string[];
    permissions?: string[];
}

export class UpdateRoleCommand implements IUpdateRoleCommand {
    id?: string;
    name?: string;
    rolemenus?: string[];
    permissions?: string[];

    constructor(data?: IUpdateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["rolemenus"])) {
                this.rolemenus = [] as any;
                for (let item of _data["rolemenus"])
                    this.rolemenus!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.rolemenus)) {
            data["rolemenus"] = [];
            for (let item of this.rolemenus)
                data["rolemenus"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface IUpdateRoleCommand {
    id?: string;
    name?: string;
    rolemenus?: string[];
    permissions?: string[];
}

export class PaginatedResponseOfAppUserModel implements IPaginatedResponseOfAppUserModel {
    items?: AppUserModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppUserModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionDataSources"]) {
                this.optionDataSources = {} as any;
                for (let key in _data["optionDataSources"]) {
                    if (_data["optionDataSources"].hasOwnProperty(key))
                        (<any>this.optionDataSources)![key] = _data["optionDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionDataSources) {
            data["optionDataSources"] = {};
            for (let key in this.optionDataSources) {
                if (this.optionDataSources.hasOwnProperty(key))
                    (<any>data["optionDataSources"])[key] = (<any>this.optionDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppUserModel {
    items?: AppUserModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionDataSources?: { [key: string]: any; };
}

export class AppUserModel implements IAppUserModel {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string | undefined;
    photoUrl?: string | undefined;
    isActive?: boolean;
    status?: string;
    assignedRoles?: string;
    optionsDataSources?: { [key: string]: any; };
    roles?: string[] | undefined;

    constructor(data?: IAppUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.photoUrl = _data["photoUrl"];
            this.isActive = _data["isActive"];
            this.status = _data["status"];
            this.assignedRoles = _data["assignedRoles"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): AppUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["photoUrl"] = this.photoUrl;
        data["isActive"] = this.isActive;
        data["status"] = this.status;
        data["assignedRoles"] = this.assignedRoles;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IAppUserModel {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string | undefined;
    photoUrl?: string | undefined;
    isActive?: boolean;
    status?: string;
    assignedRoles?: string;
    optionsDataSources?: { [key: string]: any; };
    roles?: string[] | undefined;
}

export class GetAppUserListQuery extends DataGridModel implements IGetAppUserListQuery {

    constructor(data?: IGetAppUserListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppUserListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppUserListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppUserListQuery extends IDataGridModel {
}

export class CreateAppUserCommand implements ICreateAppUserCommand {
    username!: string;
    password!: string;
    email?: string;
    firstName!: string;
    lastName!: string;
    phoneNumber?: string;
    photoUrl?: string;
    isActive?: boolean;
    roles?: string[] | undefined;

    constructor(data?: ICreateAppUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.photoUrl = _data["photoUrl"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateAppUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["photoUrl"] = this.photoUrl;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface ICreateAppUserCommand {
    username: string;
    password: string;
    email?: string;
    firstName: string;
    lastName: string;
    phoneNumber?: string;
    photoUrl?: string;
    isActive?: boolean;
    roles?: string[] | undefined;
}

export class UpdateAppUserCommand implements IUpdateAppUserCommand {
    id?: string;
    username?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
    photoUrl?: string;
    isActive?: boolean;
    roles?: string[] | undefined;

    constructor(data?: IUpdateAppUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.photoUrl = _data["photoUrl"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateAppUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["photoUrl"] = this.photoUrl;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUpdateAppUserCommand {
    id?: string;
    username?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
    photoUrl?: string;
    isActive?: boolean;
    roles?: string[] | undefined;
}

export class AddToRolesCommand implements IAddToRolesCommand {
    id?: string;
    roleNames?: string[];

    constructor(data?: IAddToRolesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames!.push(item);
            }
        }
    }

    static fromJS(data: any): AddToRolesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddToRolesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        return data;
    }
}

export interface IAddToRolesCommand {
    id?: string;
    roleNames?: string[];
}

export class AuthenticatedResponse implements IAuthenticatedResponse {
    accessToken?: string;
    tokenType?: string;
    expiresInMinutes?: number;
    refreshToken?: string;
    refreshTokenExpiresOn?: Date;

    constructor(data?: IAuthenticatedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.tokenType = _data["tokenType"];
            this.expiresInMinutes = _data["expiresInMinutes"];
            this.refreshToken = _data["refreshToken"];
            this.refreshTokenExpiresOn = _data["refreshTokenExpiresOn"] ? new Date(_data["refreshTokenExpiresOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticatedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["tokenType"] = this.tokenType;
        data["expiresInMinutes"] = this.expiresInMinutes;
        data["refreshToken"] = this.refreshToken;
        data["refreshTokenExpiresOn"] = this.refreshTokenExpiresOn ? this.refreshTokenExpiresOn.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAuthenticatedResponse {
    accessToken?: string;
    tokenType?: string;
    expiresInMinutes?: number;
    refreshToken?: string;
    refreshTokenExpiresOn?: Date;
}

export class LoginRequestCommand implements ILoginRequestCommand {
    userName?: string;
    password?: string;
    isRemember?: boolean;

    constructor(data?: ILoginRequestCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.isRemember = _data["isRemember"];
        }
    }

    static fromJS(data: any): LoginRequestCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["isRemember"] = this.isRemember;
        return data;
    }
}

export interface ILoginRequestCommand {
    userName?: string;
    password?: string;
    isRemember?: boolean;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class LMSException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isLMSException = true;

    static isLMSException(obj: any): obj is LMSException {
        return obj.isLMSException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new LMSException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}